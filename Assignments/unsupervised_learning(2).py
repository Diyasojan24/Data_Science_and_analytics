# -*- coding: utf-8 -*-
"""unsupervised_learning(2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wl8X4-v5DkZR-6WeRvDCL7H2uKm7A0d3
"""

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster

from google.colab import files
uploaded=files.upload()

df_fish=pd.read_csv('fish.csv',header=None)
df_fish

"""# **Preprocessing**"""

df_fish.info()

df_fish.describe()

df_fish.shape

numeric_cols=df_fish.select_dtypes(include=['int64','float64']).columns
X=df_fish[numeric_cols]

df_fish.duplicated().sum()

df_fish.T.duplicated().sum()

df_fish=df_fish.drop(0,axis=1)
df_fish.head()

#checking the null values
df_fish.isnull().mean()*100

X=df_fish.values

wcss = []
for i in range(1,11):
  kmeans = KMeans(n_clusters=i, init='k-means++')
  kmeans.fit(X)
  wcss.append(kmeans.inertia_)

"""# **ELBOW PLOT**"""

plt.plot(range(1,11), wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

#from the elbow plot,value of k is 3
# building the kmeans clustering model
kmeans = KMeans(n_clusters=3, init='k-means++') # model building
# max_iter can be set if we need to fix the number of iteration
y_kmeans = kmeans.fit_predict(X) # output generation

df_fish['Cluster'] = y_kmeans
df_fish.head()

# before clustering
plt.scatter(df_fish[1], df_fish[2],)
plt.title('1 vs 2')
plt.xlabel('1')
plt.ylabel('2')
plt.show()

# after clustering
plt.scatter(df_fish[1], df_fish[2],
            c = df_fish['Cluster'])
plt.title('Clusters')
plt.xlabel('1')
plt.ylabel('2')
plt.show()

plt.figure(figsize=(20,5))
plt.title('K-Means Clustering')
colors = ['red', 'Green', 'Yellow']

#ploting 1 vs 2
plt.subplot(1,5,1)
for i in range(3):
  cluster_data = df_fish[df_fish['Cluster'] == i]
  plt.scatter(df_fish[df_fish['Cluster'] == i][1],
              df_fish[df_fish['Cluster'] == i][2],
              c = colors[i], label = f'Cluster{i}')
plt.legend()

#ploting 2 vs 3
plt.subplot(1,5,2)
for i in range(3):
  cluster_data = df_fish[df_fish['Cluster'] == i]
  plt.scatter(df_fish[df_fish['Cluster'] == i][2],
              df_fish[df_fish['Cluster'] == i][3],
              c = colors[i], label = f'Cluster{i}')
plt.legend()

#ploting 3 vs 4
plt.subplot(1,5,3)
for i in range(3):
  cluster_data = df_fish[df_fish['Cluster'] == i]
  plt.scatter(df_fish[df_fish['Cluster'] == i][3],
              df_fish[df_fish['Cluster'] == i][4],
              c = colors[i], label = f'Cluster{i}')
plt.legend()
#ploting 4 vs 5
plt.subplot(1,5,4)
for i in range(3):
  cluster_data = df_fish[df_fish['Cluster'] == i]
  plt.scatter(df_fish[df_fish['Cluster'] == i][4],
              df_fish[df_fish['Cluster'] == i][5],
              c = colors[i], label = f'Cluster{i}')
plt.legend()

#ploting 5 vs 6
plt.subplot(1,5,5)
for i in range(3):
  cluster_data = df_fish[df_fish['Cluster'] == i]
  plt.scatter(df_fish[df_fish['Cluster'] == i][5],
              df_fish[df_fish['Cluster'] == i][6],
              c = colors[i], label = f'Cluster{i}')
plt.legend()
plt.show()

# predict the cluster
def predict_cluster(val1, val2, val3, val4, val5, val6):
  new_data = [[val1, val2, val3, val4, val5, val6]]
  cluster = kmeans.predict(new_data)
  return cluster[0]

# Example of using the corrected predict_cluster function
predicted_cluster = predict_cluster(242.0, 23.2, 25.4, 30.0, 38.4, 13.4)
print('The values belong to the cluster', predicted_cluster)

"""# **Agglomerative clustering**"""

ag_cluster = linkage(X, method='ward')
# ward, single, centroid
# linkage matrix i.e; agglomerative cluster model

plt.figure(figsize=(20,10))
dendrogram(ag_cluster)
plt.axhline(y=200, color='y', linestyle='--')
plt.title('Dendrogram')
plt.show()

cluster_labels = fcluster(ag_cluster, t=200, criterion='distance')
df_fish['Cluster_Agglomerative'] = cluster_labels
df_fish.head()

# after clustering
plt.scatter(df_fish[1], df_fish[2],
            c = df_fish['Cluster_Agglomerative'])
plt.title('Clusters of customers')
plt.xlabel('1')
plt.ylabel('2')
plt.show()

colors = ['red', 'Green', 'Yellow']
for i in range(3):
  cluster_data = df_fish[df_fish['Cluster_Agglomerative'] == i]
  plt.scatter(df_fish[df_fish['Cluster_Agglomerative'] == i][1],
              df_fish[df_fish['Cluster_Agglomerative'] == i][2],
              c = colors[i], label = f'Cluster{i}')
plt.legend()

plt.figure(figsize=(20,10))
plt.subplot(1,2,1)
plt.scatter(df_fish[1],
            df_fish[2],
            c = df_fish['Cluster'])
plt.title('K-Means Clustering')
plt.xlabel('col 1')
plt.ylabel('col 2')

plt.subplot(1,2,2)
plt.scatter(df_fish[1],
            df_fish[2],
            c = df_fish['Cluster_Agglomerative'])
plt.title('Agglomerative Clustering')
plt.xlabel('col 1')
plt.ylabel('col 2')

plt.show()